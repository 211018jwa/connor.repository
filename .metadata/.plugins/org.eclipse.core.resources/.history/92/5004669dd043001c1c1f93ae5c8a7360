package com.revature.service;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;
import java.sql.SQLException;
import java.util.ArrayList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.revature.exceptions.ClientNotFound;
import com.revature.exceptions.AccountNotFound;
import com.revature.exceptions.InvalidParameter;
import com.revature.Dao.ClientDao;
import com.revature.Dao.AccountDao;
import com.revature.model.ClientModel;
import com.revature.model.AccountModel;

public class ServiceTest {
	
	private ServiceTest sut;
	
	@Test
	public void testGetAllClientsPositive() throws SQLException {
		
		ClientDao mockClientDao = mock(ClientDao.class);
		
		ClientModel client1 = new ClientModel(10, "James", "Huffington", 24, "1212 Lake Blv", "444 909-8878");
		ClientModel client2 = new ClientModel(20, "Henry", "Wlliams", 26, "4534 Coral Ave.", "979 0655-0032");
		ClientModel client3 = new ClientModel(30, "Allison", "Jamie", 28, "999 West Branch Ave.", "888 454-6637");
		
		List<ClientModel> clientsFromDao = new ArrayList<>();
		clientsFromDao.add(client1);
		clientsFromDao.add(client2);
		clientsFromDao.add(client3);
		
		when(mockClientDao.getAllClients()).thenReturn(clientsFromDao);
		
		ClientService clientService = new ClientService(mockClientDao);
		
		List<ClientModel> actual = clientService.getAllClients();
		
		List<ClientModel> expected = new ArrayList<>();
		
		expected.add(new ClientModel(10, "James", "Huffington", 24, "1212 Lake Blv", "444 909-8878"));
		expected.add(new ClientModel(20, "Henry", "Wlliams", 26, "4534 Coral Ave.", "979 0655-0032"));
		expected.add(new ClientModel(30, "Allison", "Jamie", 28, "999 West Branch Ave.", "888 454-6637"));
		
		Assertions.assertEquals(expected, actual);
		
	}
	
	@Test
	public void testGetAllAccountsPositive() throws SQLException {
		
		AccountDao mockAccountDao = mock(AccountDao.class);
		
		AccountModel account1 = new AccountModel(10, "3366992255", "Checking", "12345.67", 10);
		AccountModel account2 = new AccountModel(11, "3366992256", "Savings", "24680.24", 10);
		AccountModel account3 = new AccountModel(20, "4878553222", "Checking", "15676.32", 20);
		
		List<AccountModel> accountsFromDao = new ArrayList<>();
		accountsFromDao.add(account1);
		accountsFromDao.add(account2);
		accountsFromDao.add(account3);
		
		when(mockAccountDao.getAllAccounts()).thenReturn(accountsFromDao);
		
		AccountService accountService = new AccountService(mockAccountDao);
		
		List<AccountModel> actual = accountService.getAllAccounts();
		
		List<AccountModel> expected = new ArrayList<>();
		
		expected.add(new AccountModel(10, "3366992255", "Checking", "12345.67", 10));
		expected.add(new AccountModel(11, "3366992256", "Savings", "24680.24", 10));
		expected.add(new AccountModel(20, "4878553222", "Checking", "15676.32", 20));
		
		Assertions.assertEquals(expected, actual);
	}
	
	public void testGetAllClientsNegative() throws SQLException {
		ClientDao mockClientDao = mock(ClientDao.class);
		
		when(mockClientDao.getAllClients()).thenThrow(SQLException.class);
		
		ClientService clientService = new ClientService(mockClientDao);
		
		Assertions.assertThrows(SQLException.class, () -> {
			clientService.getAllClients();
		});
	}

}
